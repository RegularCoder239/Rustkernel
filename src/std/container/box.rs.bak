use core::{
	marker::PhantomData,

	ops::Deref,
	ops::DerefMut,

	mem
};
use crate::{
	allocate,
	stack_vec,

	mm::Address
};
use crate::std::{
	Allocator,
	RAMAllocator,
	alloc::VirtualMapper
};
use super::BoxInner;

#[lang = "owned_box"]
#[fundamental]
pub struct BoxBase<T: ?Sized, A: Allocator>(
	pub content: Option<BoxInner<T>>,
	phantom: PhantomData<A>,
	phantom2: PhantomData<T>
}

pub type Box<T> = BoxBase<T, RAMAllocator>;

impl<T, A: Allocator> BoxBase<T, A> {
	#[inline(always)]
	#[must_use]
	#[cfg(not(no_global_oom_handling))]
	#[rustc_diagnostic_item = "box_new"]
	pub fn new(content: T) -> Self {
		let mut r#box = Self::new_sized(mem::size_of::<T>());
		r#box.set(content);
		r#box
	}
	pub unsafe fn new_converted_unsized<T2: ?Sized>(&self) -> BoxBase<T2, A> {
		BoxBase::<T2, A> {
			content: Some(
				BoxInner::new(
					unsafe {
						A::VirtualMapper::map::<u8>(stack_vec!{ self.physical_address() }, mem::size_of::<T>()).unwrap() as u64
					},
					mem::size_of::<T>()
				)
			),
			..BoxBase::<T2, A>::NONE
		}
	}
	pub fn from_raw_address(addr: u64) -> BoxBase<T, A> {
		Self::from_raw_virt_address(
			unsafe {
				A::VirtualMapper::map::<u8>(stack_vec!{ addr }, mem::size_of::<T>()).unwrap() as u64
			}
		)
	}
	pub fn from_raw_virt_address(addr: u64) -> BoxBase<T, A> {
		BoxBase {
			content: Some(
				BoxInner::new(
					addr,
					mem::size_of::<T>()
				)
			),

			..Self::NONE
		}
	}

	pub fn set(&mut self, content: T) {
		if self.content.is_none() {
			self.content = Some(
				BoxInner::new(
					allocate!(ptr_with_alloc, A, u8, mem::size_of::<T>()).expect("Failed to allocate box while setting.") as u64,
					mem::size_of::<T>()
				)
			);
		}
		let inner = self.inner_mut();
		*(inner.deref_mut()) = content;
	}
}

impl<T: ?Sized, A: Allocator> BoxBase<T, A> {
	pub const NONE: BoxBase<T, A> = BoxBase {
		content: None,
		phantom: PhantomData,
		phantom2: PhantomData
	};

	pub fn new_from_slice<T2>(data: &[T2]) -> BoxBase<T, A> {
		let r#box = Self::new_sized(data.len() * mem::size_of::<T2>());
		let u8data = unsafe {
			&*(data as *const [T2] as *const [u8])
		};
		let unwrapped_content = unsafe {
			&mut *core::ptr::slice_from_raw_parts_mut(
				r#box.inner().u8_ptr(),
				r#box.inner().len()
			 )
		};
		for idx in 0..data.len() * mem::size_of::<T2>() {
			unwrapped_content[idx] = u8data[idx];
		}
		r#box
	}
	pub fn new_sized(size: usize) -> BoxBase<T, A> {
		BoxBase {
			content: Some(
				BoxInner::new(
					allocate!(ptr_with_alloc, A, u8, size).unwrap() as u64,
					size
				)
			),

			..Self::NONE
		}
	}
	pub fn size(&self) -> usize {
		self.inner().len()
	}
	pub unsafe fn new_converted<T2>(&self) -> BoxBase<T2, A> {
		BoxBase::<T2, A>::from_raw_address(self.physical_address())
	}
	pub unsafe fn new_converted_nonboxed<T2>(content: T2) -> BoxBase<T2, A> {
		BoxBase::<T2, A>::new_from_slice::<T2>(&[content])
	}


	pub fn physical_address(&self) -> u64 {
		(self.inner_err("Attempt to gather physical address of Box::NONE").u8_ptr() as u64).physical_address()
	}

	pub fn as_ptr<T2>(&self) -> *mut T2 {
		self.inner().u8_ptr() as *mut T2
	}

	pub fn is_none(&self) -> bool {
		self.content.is_none()
	}

	pub fn inner(&self) -> &BoxInner<T> {
		self.content.as_ref().unwrap()
	}
	pub fn inner_mut(&mut self) -> &mut BoxInner<T> {
		self.content.as_mut().unwrap()
	}
	pub fn inner_err(&self, err: &str) -> &BoxInner<T> {
		self.content.as_ref().expect(err)
	}
}

impl<T: ?Sized, A: Allocator> Deref for BoxBase<T, A> {
	type Target = T;

	fn deref(&self) -> &T {
		self.content.as_ref().expect("Attempt to deref BoxBase::NONE").deref()
	}
}

impl<T: ?Sized, A: Allocator> DerefMut for BoxBase<T, A> {
	fn deref_mut(&mut self) -> &mut T {
		self.content.as_mut().expect("Attempt to deref BoxBase::NONE").deref_mut()
	}
}

impl<T: ?Sized, A: Allocator> Copy for BoxBase<T, A> {}

impl<T: ?Sized, A: Allocator> Clone for BoxBase<T, A> {
	fn clone(&self) -> Self {
		if self.is_none() {
			BoxBase::NONE
		} else {
			todo!("Cloning Box is unsupported for non-none boxes.")
		}
	}
}

impl<T: ?Sized, A: Allocator> Unpin for BoxBase<T, A> {}
