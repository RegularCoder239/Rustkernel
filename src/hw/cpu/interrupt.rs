use crate::std::{
	Vec,
	PerCpuLazy,
	Mutex,
	VecBase
};
use paste::paste;
use super::{
	gdt::GDT,
	lapic
};
use core::ops::Deref;
use crate::assume_safe_asm;

#[derive(Copy, Clone)]
#[repr(C, packed)]
struct InterruptDescriptor {
	offset1: u16,
	segment_selector: u16,
	pub ist: u8,
	flags: u8,
	offset2: u16,
	offset3: u32,
	reserved_2: u32
}

#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct IDT {
	descriptors: [InterruptDescriptor; 256],
}

#[repr(C, packed)]
struct IDTR {
	limit: u16,
	base: u64
}

#[derive(Clone, Copy)]
#[repr(C)]
pub struct InterruptFrame {
	pub rip: u64,
	pub cs: u16,
	_reserved: [u8; 6],
	pub rflags: u64,
	pub rsp: u64,
	pub ss: u16,
	_reserved2: [u8; 6]
}

type Handler = extern "x86-interrupt" fn();
type SignalMethod = fn(u8);
type ExceptionMethod = fn(u8, InterruptFrame, u64);

macro_rules! define_interrupt_handler_method {
	($index:literal) => {
		paste! {
			extern "x86-interrupt" fn [<interrupt_handler_ $index>]() {
				handle_interrupt($index)
			}
		}
	};
	($index:literal, exception) => {
		paste! {
			extern "x86-interrupt" fn [<interrupt_handler_ $index>](frame: InterruptFrame) {
				handle_exception($index, frame, 0)
			}
		}
	};
	($index:literal, exception_with_err) => {
		paste! {
			extern "x86-interrupt" fn [<interrupt_handler_ $index>](frame: InterruptFrame, err: u64) {
				handle_exception($index, frame, err)
			}
		}
	};
}
macro_rules! define_interrupt_handlers {
	($($index:literal),*) => {
		$(
			define_interrupt_handler_method!($index);
		)*
	}
}
macro_rules! define_exception_handlers {
	(without_err, $($index_without_err:literal),*, with_err, $($index_with_err:literal),*) => {
		$(
			define_interrupt_handler_method!($index_without_err, exception);
		)*
		$(
			define_interrupt_handler_method!($index_with_err, exception_with_err);
		)*
	}
}

macro_rules! define_interrupt_handler_list {
	($($index:literal),*) => {
		static INTERRUPT_HANDLERS: [Handler; 0x100] = [$(
			unsafe {
				core::mem::transmute(
					paste! {
						[<interrupt_handler_ $index>]
					} as *const ()
				)
			},
		)*];
	}
}
define_exception_handlers! {
without_err, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x09, 0x0a, 0x0b, 0x0c, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
with_err, 0x08, 0x0d, 0x0e
}
define_interrupt_handlers! {
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
}

define_interrupt_handler_list! {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
}

pub const TIMER: usize = 0x32;
static IDTS: PerCpuLazy<IDT> = PerCpuLazy::new(IDT::new);
static INTERRUPT_CONNECTION_METHS: Mutex<[Vec<SignalMethod>; 0x100]> = Mutex::new(
	[const { Vec::new() }; 0x100]
);
static EXCEPTION_CONNECTION_METHS: Mutex<Vec<ExceptionMethod>> = Mutex::new(const {
	Vec::new()
});

extern "x86-interrupt" fn void_handler() {

}

impl InterruptDescriptor {
	const EMPTY: InterruptDescriptor = InterruptDescriptor {
		offset1:			0x0,
		segment_selector:	GDT::CODE_SEG,
		ist:				0x0,
		flags:				0x0,
		offset2:			0x0,
		offset3:			0x0,
		reserved_2:			0x0
	};
	fn new_void() -> InterruptDescriptor {
		InterruptDescriptor::new(void_handler as u64)
	}
	const fn new(addr: u64) -> InterruptDescriptor {
		InterruptDescriptor {
			flags:				0x8e,
			offset1:			addr as u16,
			offset2:			(addr >> 16) as u16,
			offset3:			(addr >> 32) as u32,
			..Self::EMPTY
		}
	}
	fn from_method(addr: Handler) -> InterruptDescriptor {
		InterruptDescriptor::new(addr as *const i32 as u64 + crate::mm::kernel_offset())
	}
}

impl IDT {
	pub fn new() -> IDT {
		let mut idt = IDT {
			descriptors: [InterruptDescriptor::new_void(); 0x100]
		};
		idt.setup_exception_handlers();
		idt
	}
	pub fn load(&self) {
		let idtr = IDTR {
			limit: 0x1000,
			base: self as *const IDT as u64 + crate::mm::kernel_offset()
		};
		assume_safe_asm!("lidt [{}]", in, &idtr);
	}
	fn setup_exception_handlers(&mut self) {
		for idx in 0..31 {
			let mut desc = InterruptDescriptor::from_method(INTERRUPT_HANDLERS[idx]);
			desc.ist = 0x0;
			self.descriptors[idx] = desc;
		}
	}
	fn connect_handler(&mut self, idx: usize, method: Handler) {
		self.descriptors[idx] = InterruptDescriptor::from_method(method);
	}
	fn set_ist(&mut self, idx: usize, ist: u8) {
		self.descriptors[idx].ist = ist;
	}
}

pub fn current_idt() -> &'static mut IDT {
	IDTS.deref_mut()
}

pub fn connect_signal(index: usize, meth: SignalMethod) {
	let mut lock = INTERRUPT_CONNECTION_METHS.lock();
	if lock.len() == 0 {
		IDTS.deref_mut().connect_handler(
			index,
			INTERRUPT_HANDLERS[index]
		);
	}

	lock[index].push_back(meth);
}

pub fn connect_exception(meth: ExceptionMethod) {
	EXCEPTION_CONNECTION_METHS.lock().push_back(meth);
}

pub fn handle_interrupt(vector: u8) {
	let methods = &INTERRUPT_CONNECTION_METHS.lock()[vector as usize];
	for method in methods.into_iter() {
		method(vector);
	}
	lapic::LAPIC::end_of_interrupt();
}

pub fn handle_exception(vector: u8, frame: InterruptFrame, err_code: u64) {
	let exception_meths = EXCEPTION_CONNECTION_METHS.try_lock();
	if let Some(methods) = exception_meths.as_ref() {
		if methods.deref().len() == 0 {
			panic!("Fatal exception with no exception handler.");
		}
		for method in methods.deref() {
			method(vector, frame, err_code);
		}
	} else {
		panic!("Fatal exception in exception handler.");
	}

	lapic::LAPIC::end_of_interrupt();
}
